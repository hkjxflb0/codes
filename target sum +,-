//// can also be solved using 2 subset min difference concept s1-s2 = d and s1 + s2 = s

//plus minus way
#include <bits/stdc++.h> 
int solve(int ind,int target,vector<int> &nums,map<pair<int,int>,int> &dp)
{
   
    
    if(ind < 0)
    {
        //either you achieve the target or you don't achieve the target
        if(target == 0)
            return 1;
        else
            return 0; 
    }
    if(dp.find({ind, target}) != dp.end())
    {
        return dp[{ind,target}];
    }
    int plus = 0;
    int minus = 0;
    plus = solve(ind-1,target + nums[ind],nums,dp);
    minus = solve(ind - 1, target - nums[ind],nums,dp);

    return dp[{ind, target}]  = plus + minus;
    

}
int targetSum(int n, int target, vector<int>& arr) {
    // Write your code here.
   map<pair<int,int>,int> dp;
        return solve(n-1,target,arr,dp);

}
