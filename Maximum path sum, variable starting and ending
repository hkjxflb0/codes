#include <bits/stdc++.h> 
int solve(int i,int j,vector<vector<int>> &matrix,int m,vector<vector<int>> &dp)
{
    
    if(j < 0 || j>m-1)
    {
         return -1e8;
    }
    if(i==0)
    {
        return dp[0][j] = matrix[0][j];
    }
    if(dp[i][j] != -1)
    {
        return dp[i][j];
    }
    int up = matrix[i][j] + solve(i-1,j,matrix,m,dp);
    int leftfashion = matrix[i][j] + solve(i-1,j-1,matrix,m,dp);
    int rightfashion = matrix[i][j] + solve(i-1,j+1,matrix,m,dp);

    return dp[i][j] = max(up,max(leftfashion,rightfashion));
}
int getMaxPathSum(vector<vector<int>> &matrix)
{
    //  Write your code here.
    int n = matrix.size();
    int m = matrix[0].size();
    int maxi = -1e8;
    vector<vector<int>> dp(n,vector<int> (m,-1));

    for(int i = 0; i < m;i++)
    {
        int ans = solve(n-1,i,matrix,m,dp);
        maxi = max(maxi,ans);
    }

    return maxi;
     
}
