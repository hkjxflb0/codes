#include <bits/stdc++.h> 
bool solve(int ind,int target,vector<int> &arr,vector<vector<int>> &dp)
{   if(target == 0)
    {
        return true;
    }
    if(ind == 0)
    {
        if(arr[ind] == target)
        {   dp[ind][target] = 1;
            return true;
        }
        else{
            dp[ind][target] = 0;
            return false;
        }
    }
    if(dp[ind][target] != -1)
    {
        return dp[ind][target];
    }
    bool nottake = solve(ind-1,target,arr,dp);
    bool take = false;
    if(arr[ind] <= target) take = solve(ind-1,target - arr[ind],arr,dp);
    return  dp[ind][target] = take | nottake;
    
}
bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<bool>> dp(n, vector<bool>(k+1,0));
    for(int i = 0; i < n;i++)
    dp[i][0] = true;

    dp[0][arr[0]] = true;

    for(int ind = 1; ind < n; ind++)
    {
        for(int target = 1; target <= k; target++)
        {
            bool nottake = dp[ind-1][target];
            bool take = false;
            if(arr[ind] <= target) take = dp[ind-1][target-arr[ind]];

            dp[ind][target] = take | nottake;
        }
    }

    return dp[n-1][k];
}
